# -----------------------------
# Minimum CMake version
# -----------------------------
cmake_minimum_required(VERSION 3.18)

# Add Android-specific flags HERE
if(ANDROID)
    # Suppress #warning directives since we explicitly disabled thread safety
    add_compile_options(-Wno-cpp)

    # Add your other definitions
    add_definitions(-DZENLIB_NO_HTTP_CLIENT)
    add_definitions(-DZENLIB_NO_THREAD_SAFE)
endif()

# Project
project(mediainfo_android LANGUAGES C CXX)

# -----------------------------
# Compiler setup
# -----------------------------
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# -----------------------------
# Output directories
# -----------------------------
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/libs/${ANDROID_ABI})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/libs/${ANDROID_ABI})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/libs/${ANDROID_ABI})

# -----------------------------
# Android compatibility header
# -----------------------------
file(WRITE ${CMAKE_CURRENT_SOURCE_DIR}/android_compat.h

"#ifndef ANDROID_COMPAT_H
#define ANDROID_COMPAT_H

#include <sys/socket.h>
#include <strings.h>
#include <string.h>
#include <stdint.h>
#include <errno.h>
#include <unistd.h>

// Windows type definitions for Android
typedef int32_t INT;
typedef uint32_t UINT;
typedef int32_t LONG;
typedef uint32_t DWORD;
typedef uint16_t WORD;
typedef uint8_t BYTE;
typedef char CHAR;
typedef unsigned char UCHAR;
typedef int BOOL;

// String function mappings
#define strnicmp strncasecmp
#define stricmp strcasecmp

// Socket compatibility
#define WSAGetLastError() errno
#define INVALID_SOCKET (-1)
#define SOCKET_ERROR (-1)
#define closesocket close

#endif // ANDROID_COMPAT_H
")

# -----------------------------
# Preprocessor defines
# -----------------------------
add_definitions(
        -DMEDIAINFO_ANDROID
        -DUNICODE
        -D_UNICODE
        -DMEDIAINFO_ADVANCED_NO
        -DMEDIAINFO_REFERENCES_NO
        -DMEDIAINFO_FILTER_NO
        -DMEDIAINFO_DUPLICATE_NO
        -DMEDIAINFO_MACROBLOCKS_NO
        -DMEDIAINFO_TRACE_NO
        -DMEDIAINFO_TRACE_FFV1CONTENT_NO
        -DMEDIAINFO_IBI_NO
        -DMEDIAINFO_DIRECTORY_NO
        -DMEDIAINFO_LIBCURL_NO
        -DMEDIAINFO_LIBMMS_NO
        -DMEDIAINFO_DVDIF_ANALYZE_NO
        -DMEDIAINFO_MPEGTS_DUPLICATE_NO
        -DMEDIAINFO_READTHREAD_NO
        -DMEDIAINFO_MD5_NO
        -DMEDIAINFO_SHA1_NO
        -DMEDIAINFO_SHA2_NO
        -DMEDIAINFO_EVENTS_NO
        -DMEDIAINFO_DEMUX_NO
        -DMEDIAINFO_AES_NO
        -DMEDIAINFO_FIXITY_NO
        -DMEDIAINFO_READER_NO
        -DMEDIAINFO_NEXTPACKET_NO
        -DMEDIAINFO_GRAPHVIZ_NO
        -DZENLIB_NO_THREAD_SAFE
)

# Force include android_compat.h for all C files
add_compile_options($<$<COMPILE_LANGUAGE:C>:-include${CMAKE_CURRENT_SOURCE_DIR}/android_compat.h>)

# -----------------------------
# Include directories
# -----------------------------
include_directories(
        ${CMAKE_CURRENT_SOURCE_DIR}/ZenLib/Source
        ${CMAKE_CURRENT_SOURCE_DIR}/MediaInfoLib/Source
        ${CMAKE_CURRENT_SOURCE_DIR}/MediaInfoLib/Source/MediaInfo
        ${CMAKE_CURRENT_SOURCE_DIR}
)

# -----------------------------
# ZenLib
# -----------------------------
file(GLOB_RECURSE ZENLIB_SOURCES
        "${CMAKE_CURRENT_SOURCE_DIR}/ZenLib/Source/ZenLib/*.cpp"
        "${CMAKE_CURRENT_SOURCE_DIR}/ZenLib/Source/ZenLib/*.c"
)
# Remove HTTP client files
list(FILTER ZENLIB_SOURCES EXCLUDE REGEX ".*HTTP_Client.*")

# Also add the definition
add_definitions(-DZENLIB_NO_HTTP_CLIENT)

add_library(zen STATIC ${ZENLIB_SOURCES})
set_target_properties(zen PROPERTIES POSITION_INDEPENDENT_CODE ON)
# Add compatibility header specifically to zen target
target_include_directories(zen PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})

# -----------------------------
# Third-party libs
# -----------------------------
set(TFSXML_DIR ${CMAKE_CURRENT_SOURCE_DIR}/MediaInfoLib/Source/ThirdParty/tfsxml)
set(TINYXML2_DIR ${CMAKE_CURRENT_SOURCE_DIR}/MediaInfoLib/Source/ThirdParty/tinyxml2)

file(GLOB_RECURSE TINYXML2_SOURCES "${TINYXML2_DIR}/*.cpp")

add_library(thirdparty STATIC
        ${TFSXML_DIR}/tfsxml.c
        ${TINYXML2_SOURCES}
)

set_target_properties(thirdparty PROPERTIES POSITION_INDEPENDENT_CODE ON)
target_include_directories(thirdparty PUBLIC
        ${TFSXML_DIR}
        ${TINYXML2_DIR}
)

# -----------------------------
# MediaInfo
# -----------------------------
file(GLOB_RECURSE MEDIAINFO_SOURCES
        "${CMAKE_CURRENT_SOURCE_DIR}/MediaInfoLib/Source/MediaInfo/*.cpp"
        "${CMAKE_CURRENT_SOURCE_DIR}/MediaInfoLib/Source/MediaInfo/*.c"
)
add_library(mediainfo STATIC ${MEDIAINFO_SOURCES})
set_target_properties(mediainfo PROPERTIES POSITION_INDEPENDENT_CODE ON)
target_link_libraries(mediainfo thirdparty zen)

# -----------------------------
# JNI bridge
# -----------------------------
add_library(mediainfo_jni SHARED mediainfo-jni.cpp)
target_include_directories(mediainfo_jni PRIVATE
        ${CMAKE_CURRENT_SOURCE_DIR}/ZenLib/Source
        ${CMAKE_CURRENT_SOURCE_DIR}/MediaInfoLib/Source
        ${CMAKE_CURRENT_SOURCE_DIR}/MediaInfoLib/Source/MediaInfo
        ${CMAKE_CURRENT_SOURCE_DIR}
)
target_link_libraries(mediainfo_jni mediainfo thirdparty zen log z)